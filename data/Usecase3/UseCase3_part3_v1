def filterActivePrice(db_path, table_name, start_date, end_date, days_to_expiry, contract_month, prefix) {
    contracts = ()
    for(month_code in `F`G`H`J`K`M`N`Q`U`V`X`Z) {
        for (y in 0..9) {
            contracts.append!(prefix + month_code + y)  
        }
    }
    // generate two dictionaries to map contract month to contract end date and contract start date, respectively
    month_codes = ["F", "G", "H", "J", "K", "M", "N", "Q", "U", "V", "X", "Z"]
    months = seq(month(start_date) - 2, month(end_date) + 2)
    contract_code = month_codes[months % 12] + string(months / 12 % 10)
    contract_end_date = months.date() +  7 - days_to_expiry
    contract_start_date = (months - 1).date() + 7 - days_to_expiry
    if(!contract_month.startsWith("F")) {
        int_year = int(contract_month.right(1)) + year(start_date) / 10 % 200 * 10 + 2000
        int_month = month_codes.find(contract_month.left(1))
        sub_month = int_month - (month(start_date) % 12)
        cur_month = month(int_month + int_year * 12)
        contract_end_date = iif(months == cur_month, temporalAdd(contract_end_date, -sub_month, "M"), contract_end_date)
        contract_start_date = iif(months between pair(cur_month, cur_month+1), temporalAdd(contract_start_date, -sub_month, "M"), contract_start_date)
        contract_start_date = iif(months between pair(month(int_year * 12), cur_month - 1), temporalAdd(contract_start_date, 1, "y"), contract_start_date)
    }
    contract_end = dict(contract_code, contract_end_date)
    contract_start = dict(contract_code, contract_start_date)
    res_inter = select  time as datetime, sym as contract, mid as price from loadTable(db_path, table_name) where date between timestamp(start_date) : timestamp(end_date) and date <= timestamp(contract_end[sym.right(2)]) and date >= timestamp(contract_start[sym.right(2)]) and sym in contracts
    append_table_end = select  distinct(contract) as contract from  res_inter
    update  append_table_end set datetime = contract_end[contract.right(2)], price = double()
    append_table_end = select  timestamp(datetime) + 1000 * 10 as datetime, contract,  price from append_table_end
    append_table_end = select  * from    append_table_end where   datetime between timestamp(start_date) : timestamp(end_date) and datetime <= timestamp(contract_end[contract.right(2)]) + 1000 * 10 and datetime >= timestamp(contract_start[contract.right(2)]) + 1000 * 10
    res_inter.append!(append_table_end)
    append_table_start = select  distinct(contract) as contract from res_inter
    update  append_table_start set date = contract_start[contract.right(2)]
    append_table_start = select  (timestamp(date)) as datetime, contract from append_table_start
    raw_price_2 = select  time as datetime, sym as contract, mid as price from loadTable(db_path, table_name) where date between  start_date : end_date and sym  in append_table_start.contract context by sym, date(date)  csort date limit -1
    raw_price_2 = select  * from  raw_price_2 order by datetime
    append_table_start1 = select  datetime, contract, price from aj(append_table_start, raw_price_2, `contract`datetime)
    res_inter.append!(append_table_start1).sortBy!(`datetime)
    res = select  *, contract_end[contract.right(2)] as order_contract from res_inter where   datetime between timestamp(start_date) : timestamp(end_date+1) and datetime <= timestamp(contract_end[contract.right(2)]) + 1000 * 10 and datetime >= timestamp(contract_start[contract.right(2)])
    //segment in memory table
    dbb = database("", VALUE, res.contract.distinct())
    res = dbb.createPartitionedTable(res, "res", `contract).append!(res)
    res = select  last(price) as price, last(order_contract) as order_contract from  res  group by contract, interval(datetime, 10s, "prev") as datetime order by order_contract
    return res
}

login("admin", "123456")
db_path = "dfs://demo_complete_dates"
table_name = "trades"
start_date = 2015.03.01
end_date = 2020.02.05
days_to_expiry = 4
contract_month = "N5"
prefix = "CL"

timer{
roll_in1 = filterActivePrice(db_path, table_name, start_date, end_date, days_to_expiry, contract_month, prefix)
tmp = select datetime, contract, datetime.next() as nextDate, price, accumulate(*, iif(datetime == datetime.prev(), price.prev()/price, NULL), 1.0) as forwardFactor, accumulate(*, iif(datetime == datetime.next(), price.next()/price, NULL).reverse(), 1.0).reverse() as backwardFactor from roll_in1 where price != NULL context by left(contract, contract.strlen() - 2)
tmp2 = select datetime, contract, price as original, price * forwardFactor as forward , price * backwardFactor as backward, forwardFactor, backwardFactor from tmp where   datetime != nextDate
result = select  temporalAdd(datetime, 10, "s") as datetime, contract, original, forward, backward, forwardFactor, backwardFactor from tmp2
}


fr_v1=select first(datetime) as datetime,first(contract) as contract, prefix, forwardFactor, backwardFactor from result group by contract, substr(contract, 0, strlen(contract) - 2) as prefix, forwardFactor, backwardFactor order by prefix, datetime

